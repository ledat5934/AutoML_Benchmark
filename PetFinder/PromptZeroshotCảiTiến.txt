PetFinder: 

You are an expert programmer with years of experience in writing codes for machine learning (ML) tasks on Kaggle. Your goal is to write an end-to-end executable program that can solve the ML task based on the provided instructions. The user is trying to create a Python program for a supervised machine learning task. Your goal is to assist the user in creating the program. The user might provide the following information for the task:

1. A description of the input data: The input data is multimodal, containing tabular data, text descriptions, and images for each pet profile.

The tabular data in 'train.csv' includes the following fields:

- `PetID`: Unique hash ID for the pet profile.

- `Type`: Type of animal (1 for Dog, 2 for Cat).

- `Name`: Name of the pet (can be empty).

- `Age`: Age of the pet in months when listed.

- `Breed1`: ID for the primary breed of the pet.

- `Breed2`: ID for the secondary breed if the pet is a mixed breed.

- `Gender`: Gender of the pet (1 for Male, 2 for Female, 3 for Mixed group).

- `Color1`, `Color2`, `Color3`: IDs for the primary, secondary, and tertiary colors of the pet.

- `MaturitySize`: Size at maturity (1=Small, 2=Medium, 3=Large, 4=Extra Large, 0=Not Specified).

- `FurLength`: Fur length (1=Short, 2=Medium, 3=Long, 0=Not Specified).

- `Vaccinated`: Vaccination status (1=Yes, 2=No, 3=Not Sure).

- `Dewormed`: Deworming status (1=Yes, 2=No, 3=Not Sure).

- `Sterilized`: Spayed/neutered status (1=Yes, 2=No, 3=Not Sure).

- `Health`: Health condition (1=Healthy, 2=Minor Injury, 3=Serious Injury, 0=Not Specified).

- `Quantity`: Number of pets represented in this profile.

- `Fee`: Adoption fee in Malaysian Ringgit (0 for Free).

- `State`: ID for the state location in Malaysia.

- `RescuerID`: Unique hash ID of the rescuer.

- `VideoAmt`: The number of videos uploaded for the pet.

- `PhotoAmt`: The number of photos uploaded for the pet.

The text data consists of:

- `Description`: A profile write-up for the pet, primarily in English, with some in Malay or Chinese.

The image and metadata consist of:

- Photos for each pet.

- Supplementary JSON files containing metadata from Google Vision API (image analysis) and Google Natural Language API (sentiment analysis of the description).

2. A description of the output data:-- The output is a single categorical value named 'AdoptionSpeed'. This value is an integer ranging from 0 to 4, representing how quickly a pet was adopted:

 -0: Same day.

 -1: 1-7 days.

- 2: 8-30 days.

- 3: 31-90 days.

- 4: Not adopted after 100 days.

3. The task objective:-- For each pet profile, predict its 'AdoptionSpeed' category (0, 1, 2, 3, or 4) based on its combined tabular, text, and image data. This is a multi-class classification problem.

4. The evaluation metrics:-- The primary evaluation metric is the Quadratic Weighted Kappa, which measures the agreement between the predicted and actual adoption speed ratings.

5. A description of the available files:-- - `train.csv`: Contains the primary tabular and text data for training, including all features mentioned above and the 'AdoptionSpeed' label.

- `breed_labels.csv`, `color_labels.csv`, `state_labels.csv`: Helper CSV files that map the Breed, Color, and State IDs to their respective human-readable names.

- `train_images/`,`: Directories containing image files for each pet.

- `train_metadata/`, `: Directories containing JSON files with image metadata.

- `train_sentiment/`, : Directories containing JSON files with sentiment analysis data.

6.Link to the data files:

/kaggle/input/petfinder-adoption-prediction/train/train.csv

/kaggle/input/petfinder-adoption-prediction/train_images

/kaggle/input/petfinder-adoption-prediction/train_metadata

/kaggle/input/petfinder-adoption-prediction/train_sentiment

/kaggle/input/petfinder-adoption-prediction/breed_labels.csv

/kaggle/input/petfinder-adoption-prediction/color_labels.csv

/kaggle/input/petfinder-adoption-prediction/state_labels.csv

split the train to evaluate by these folowing metrics: accuracy log_loss f1_macro f1_weighted roc_auc_ovr roc_auc_ovr_weighted

use the newest version of each library you use
